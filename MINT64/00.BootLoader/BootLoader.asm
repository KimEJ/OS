[ORG 0X00]									;코드 시작 번지 설정(0x00)
[BITS 16]									;코드를 16비트로 설정

SECTION .txt								;색션 정의 (txt는 코드 섹션)

jmp 0x07C0:START							;CS 세그먼트 레지스터(현재 사용 중인 프로그램의 코드가 저장된 세그먼트의 주소를 가리키는 레지스터)에 0x07C0을 복사하면서 START레이블로 이동

START:
	mov ax, 0x07C0							;부트로더의 시작 어드레스(0x07C0)를 세그먼트 레지스터값으로 변환
	mov ds, ax								;DS세그먼트 레지스터에 설정
	mov ax, 0xB800							;비디오 메모리의 시작 어드레스(0xB800)를 세그먼트 레지스터 값으로 변환
	mov es, ax								;ES 세그먼트 레지스터에 설정

	mov si,	0								;SI 레지스터(문자열 원본 인덱스 레지스터)를 초기화

.SCREENCLEARLOOP:
	mov byte [ es: si ], 0					;비디오 메모리의 문자가 위치하는 어드레스에 0을 복사하여 문자 삭제								
	mov byte [ es: si + 1 ], 0x0B			;비디오 메모리의 속성이 위치하는 어드레스(문자 어드레스 +1)에 0x28(녹색바탕 회색)을 복사

	add si, 2								;다음위치로 이동 (C에서 si += 2; 의 역할)

	cmp si, 80*25*2							;화면의 전체 크기는 80문자*25라인이므로 SI 레지스터와 비교
	jl .SCREENCLEARLOOP						;cmp 명령의 결과가 왼쪽 인자의 값이 오른쪽 인자의 값보다 작으면 다시 .SCREENCLEARLOOP실행

	mov si, 0								;SI레지스터(문자열 원본 인덱스 레지스터)를 초기화
	mov di, 0								;DI레지스터(문자열 대상 인덱스 레지스터)를 초기화

.MESSAGELOOP:
	mov cl, byte [ si + MESSAGE1 ]			;MESSAGE1의 어드레스+si를 CL레지스터에 복사
	
 	cmp cl, 0          				        ;복사된 문자와 0을 비교
    je  .MESSAGEEND             			;cmp 명령의 결과가 왼쪽 인자의 값과 오른쪽의 인자값이 같으면 .MESSAGEEND로 이동

	mov byte [ es: di ], cl     			;0이 아니면 비디오 메모리 어드레스 0xB800:di에 문자를 복사

	add si, 1                   			;SI 레지스터에 1을 더하여 다음 문자열로 이동
	add di, 2                   			;DI 레지스터에 2를 더하여 비디오 메모리의 다음 문자 위치로 이동
				            				;비디오 메모리는 문자, 속성의 쌍으로 구성되므로 문자만 출력하려면 2를 더해야한다.

	jmp .MESSAGELOOP            			;메시지 출력 루프로 이동하여 다음 문자 출력

.MESSAGEEND:
	jmp $                                   ;현재 위치에서 무한 루프 실행

MESSAGE1: db 'BootLoader Lunch', 0  		;출력할 메시지 정의
											;마지막은 0으로 설정하여 .MESSAGELOOP에서 처리할 수 있게 함


;jmp $               						;현재 위치에서 무한 루프 실행

times 510 - ( $ - $$ )  db  0x00    		;$: 현재 라인의 어드레스
											;$$: 현재 섹션(.text)의 시작 어드레스
											;$ - $$: 현재 섹션을 기준으로 하는 오프셋
											;510 - ( $ - $$ ): 현재부터 어드레스 510까지
											;db 0x00: 1바이트를 선언하고 값은 0x00
											;time: 반복 수행
 	                                		;현재 위치에서 어드레스 510까지 0x00으로 채움

db 0x55         						    ;1바이트를 선언하고 값은 0x55
db 0xAA         						    ;1바이트를 선언하고 값은 0xAA
											;어드레스 511, 512에 0x55, 0xAA를 써서 부트 섹터로 표기함
